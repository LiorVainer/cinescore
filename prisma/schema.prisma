generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String           @id
  name          String
  email         String           @unique
  emailVerified Boolean          @default(false)
  image         String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @default(now()) @updatedAt
  accounts      Account[]
  notifications Notification[]
  sessions      Session[]
  follows       Follow[]
  triggers      Trigger[]
  preferences   UserPreferences?

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

enum FollowType {
  ACTOR
  GENRE
}

enum TriggerConditionType {
  ACTOR
  GENRE
  RATING
  DURATION_MIN
  DURATION_MAX
}

enum MovieStatus {
  NOW_PLAYING
  UPCOMING
}

enum Language {
  he_IL
  en_US
}

enum NotifyMethod {
  EMAIL
  // SMS
  // PUSH
}

model UserPreferences {
  id        String         @id @default(cuid())
  userId    String         @unique
  notifyBy  NotifyMethod[] @default([EMAIL])
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now()) @updatedAt
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model Follow {
  id        String     @id @default(cuid())
  userId    String
  type      FollowType
  value     String // actor name or genre name
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type, value])
  @@index([type])
  @@index([userId])
  @@map("follow")
}

model Trigger {
  id            String             @id @default(cuid())
  userId        String
  name          String // User-friendly name: "High-rated Action with Emma Stone"
  conditions    TriggerCondition[]
  notifications Notification[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @default(now()) @updatedAt
  user          User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("trigger")
}

model TriggerCondition {
  id           String               @id @default(cuid())
  triggerId    String
  type         TriggerConditionType
  stringValue  String? // For ACTOR/GENRE: the name
  numericValue Float? // For RATING/DURATION_MIN/DURATION_MAX: the threshold or duration value
  trigger      Trigger              @relation(fields: [triggerId], references: [id], onDelete: Cascade)

  @@index([triggerId])
  @@map("trigger_condition")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  movieId   String
  triggerId String? // Which trigger triggered this notification
  sentAt    DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  trigger   Trigger? @relation(fields: [triggerId], references: [id], onDelete: SetNull)

  @@unique([userId, movieId])
  @@index([sentAt])
  @@index([triggerId])
  @@map("notification")
}

model Movie {
  tmdbId           Int                @unique
  id               String             @id
  imdbId           String             @unique
  originalLanguage Language?
  rating           Float?
  votes            Int?
  runtime          Int                @default(0)
  status           MovieStatus        @default(NOW_PLAYING)
  releaseDate      DateTime?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt
  genres           Genre[]
  cast             Cast[]
  trailers         Trailer[]
  translations     MovieTranslation[]
  notifications    Notification[]

  @@index([rating])
  @@index([releaseDate])
  @@map("movie")
}

model MovieTranslation {
  id            String   @id @default(cuid())
  movieId       String
  language      Language
  title         String
  description   String?
  originalTitle String?
  posterUrl     String?
  backdropUrl   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  movie         Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@unique([movieId, language])
  @@index([language])
  @@map("movie_translation")
}

model Trailer {
  id        String   @id @default(cuid())
  movieId   String
  url       String
  title     String
  youtubeId String
  language  Language
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@unique([movieId, url])
  @@map("trailer")
}

//
// ─── GENRES ──────────────────────────────────────────────
//

model Genre {
  id           String             @id @default(cuid())
  tmdbId       Int?               @unique // Add TMDB ID as a separate field
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @default(now()) @updatedAt
  movies       Movie[]
  translations GenreTranslation[]

  @@map("genre")
}

model GenreTranslation {
  id        String   @id @default(cuid())
  genreId   String
  language  Language
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  genre     Genre    @relation(fields: [genreId], references: [id], onDelete: Cascade)

  @@unique([genreId, language])
  @@index([language])
  @@map("genre_translation")
}

//
// ─── ACTORS ──────────────────────────────────────────────
//

model Actor {
  id           String             @id @default(cuid())
  imdbId       String             @unique
  tmdbId       Int?
  profileUrl   String?
  popularity   Float?
  birthday     DateTime?
  deathday     DateTime?
  placeOfBirth String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @default(now()) @updatedAt
  translations ActorTranslation[]
  cast         Cast[]

  @@map("actor")
}

model ActorTranslation {
  id        String   @id @default(cuid())
  actorId   String
  language  Language
  name      String
  biography String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  actor     Actor    @relation(fields: [actorId], references: [id], onDelete: Cascade)

  @@unique([actorId, language])
  @@index([language])
  @@map("actor_translation")
}

model Cast {
  id        String   @id @default(cuid())
  movieId   String
  actorId   String
  character String?
  order     Int?
  createdAt DateTime @default(now())
  actor     Actor    @relation(fields: [actorId], references: [id], onDelete: Cascade)
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@unique([movieId, actorId])
  @@map("cast")
}
