generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]

  // Application relations
  subscriptions Subscription[]
  notifications Notification[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

// --------------------------
// Application-specific models
// --------------------------

enum NotifyMethod {
  email
  sms
}

model Movie {
  id          String    @id // imdbID or fallback
  title       String
  description String?
  posterUrl   String?
  rating      Float?
  votes       Int?
  releaseDate DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  notifications Notification[]
  genres        Genre[] // many-to-many with Genre

  @@index([rating])
  @@index([releaseDate])
  @@map("movie")
}

model Genre {
  id        Int      @id
  name      String   @unique
  movies    Movie[]
  language  String   @default("he-IL")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("genre")
}

model Subscription {
  id        String         @id @default(cuid())
  userId    String
  threshold Float
  genre     String?
  notifyBy  NotifyMethod[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([threshold])
  @@map("subscription")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  movieId   String
  sentAt    DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@unique([userId, movieId])
  @@index([sentAt])
  @@map("notification")
}
